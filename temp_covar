it file:

    //5ms sample rate for mag detector
    if(ADC1->ISR & ADC_ISR_EOC){
        
      if(adc_order == 0){
        adc_ch1 = ADC1->DR;
        gain_update = 1;
        
        if(notch_filter_configure == 1){
          adc_m[adc_m_cnt++] = adc_ch1;
          if(adc_m_cnt == 20){ adc_m_cnt = 0;
            notch_filter_configure = 0;
          }
        }


        covarDataMonitorArr[cdma_cnt++] = adc_ch1;
        if(cdma_cnt > 99) cdma_cnt = 0;
        
        if((adc_ready == 1)&&(adc_fetch_timeout == 0)&&(agm_standby_active_mode == 0x01)){
          if(record_start_delay_done == 1){
            //threshold_buffer(adc_ch1, 200);
            //correlator_threshold_buffer(adc_ch1);
            covar_threshold_buffer(adc_ch1);
            //correlation_func(adc_ch1);
          }
          adc_fetch_timeout = 50;//5ms
        }
        if((adc_ready == 1)&&(adc_fetch_timeout == 0)&&(agm_standby_active_mode == 0x00)){
          if(cor_done == 1){
            cor_done = 0;
            //correlation_func_standart(adc_ch1);
            covarCoefArr[cca_cnt++] = covar_evaluate(covarDataMonitorArr[cdma_cnt], 0);
            if(cca_cnt>99)cca_cnt = 0;

            //correlation_func(adc_ch1);
          }
          adc_fetch_timeout = 50;//1ms sampling time for 22Hz detection, adc sampling time faster than 10usec//5ms
          //if(mag_detect) adc_fetch_time = 50;
        }        
        adc_ready = 1;
        
        
      }
      if(adc_order == 1){
        adc_ch2 = ADC1->DR;
        
      }
        adc_order++;
        if(adc_order == 2) adc_order = 0;
        LL_ADC_REG_StartConversion(ADC1);
        CLEAR_BIT(ADC1->ISR, ADC_ISR_EOC);
        
        voltage_monitor = 3.116*((float)adc_ch2/4095)*3.3;  
        if(voltage_monitor < 1.6) agm.battery = BATTERY_EMPTY;
        if((voltage_monitor >= 1.6) && (voltage_monitor < 2.5))agm.battery = BATTERY_1_3;
        if((voltage_monitor >= 2.4) && (voltage_monitor < 3))agm.battery = BATTERY_2_3;
        if(voltage_monitor >= 2.9)agm.battery = BATTERY_FULL; 
    }//ADC
    if(adc_fetch_timeout !=0) adc_fetch_timeout--;
    
    
    
    main:
    int32_t covar_evaluate(uint16_t arr, uint8_t offset){
  int32_t temp_covar = 0;

  //dataMonADC[dataCounterADC++] = data_input;
  //if(dataCounterADC >=100)dataCounterADC = 0;
            
  adcCorDataBuf[adcCorDataHead++] = arr;
  if(adcCorDataHead>10)adcCorDataHead=0;
  temp_cor_coef = 0;
  temp_signal_sum = 0;
  temp_signal_mean = 0;
  

  for(uint8_t iCor = 0;iCor < 11; iCor++){
    temp_signal_sum += ((uint32_t)adcCorDataBuf[iCor]);
    //temp_ext_signal += ((uint32_t)arr[offset+Cor]);
  }
  sigMean = (float)temp_signal_sum/11;
    
  for(uint8_t iCor = 0;iCor < 11; iCor++){
    temp_covar += ((float)adcCorDataBuf[iCor] - (float)sigMean)*((float)z_refCor[iCor] - z_ref_mean);
  }     
    
  if(temp_covar > max_covar) max_covar = temp_covar;
  if(temp_covar < min_covar) min_covar = temp_covar;
    
  covArray[covHead++] = temp_covar;

  if(covHead >= 50) covHead = 0;//covariation data buffer
  cor_done = 1;
  
  return (temp_covar);// div 11
}

void covar_threshold_buffer(uint16_t data_input){	
	
        //int32_t covar_min = 0, covar_max = 0;

        temp_buf[buf_head++] = data_input; 
        
        covar.covarDataBuf[covar.covarDataBufHead++] = data_input; 
        if(covar.covarDataBufHead > 32)covar.covarDataBufHead = 0;
        
        if(covar_min_counts < 11)covar_min_counts++;
        if(covar_min_counts >= 11){
          
          covar.covarCoefBuf[covar.covarCoefBufHead++] = covar_evaluate(covar.covarDataBuf[covar.covarDataBufTail++], 20);
          if(covar.covarDataBufTail > 32) covar.covarDataBufTail = 0;
        
        //if(buf_len_cnt>=30){            
          //if(write_from_buf_cnt <30) write_from_buf_cnt++;
          
          covar.covar_max = 0;
          covar.covar_min = 0;
          
          for(uint8_t ic = 0; ic<11; ic++){
            if(covar.covarCoefBuf[ic] > covar.covar_max) covar.covar_max = covar.covarCoefBuf[ic];
            if(covar.covarCoefBuf[ic] < covar.covar_min) covar.covar_min = covar.covarCoefBuf[ic];
          }
          if((covar.covar_max - covar.covar_min)>0.5e7){
            //if(write_from_buf_cnt >= 30){
              temp_fram_write_event = 1;
              if(record_state != 1)record_start = 1;
              record_state = 1;   
            //}
            /*
            else{
              temp_fram_write_event = 1;
              record_state = 1; 
              record_start = 0;//no header, continue last record
              write_from_buf_cnt--;
            } 
            */
          }
          else{
            buzzer_alarm = 0;
            temp_fram_write_event = 0;
            //agm.event = 0;//no event
            record_state = 0;            
          }
       
          //Common write block
          
          if(temp_fram_write_event == 1){
             HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
             HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
             recordTime.Seconds = sTime.Seconds;
             recordTime.Minutes = sTime.Minutes;
             recordTime.Hours = sTime.Hours;
             recordDate.Date = DateToUpdate.Date;
             recordDate.Month = DateToUpdate.Month;
             recordDate.Year = DateToUpdate.Year;
             agm.event = EVENT;
             if(record_start == 1){
               record_length_enough_cnt = 5001;
               record_length_enough = 0;
               temp_fram_address_cnt = _fram_address_cnt;
               buzzer_alarm = 1;
               record_number++;
               recordHeader[0] = 0x0000;
               recordHeader[1] = 0xAA55;
               recordHeader[2] = record_number;
               recordHeader[3] = agm_option_menu.record_mode;
               recordHeader[4] = agm_gps_status.latitude_hi;
               recordHeader[5] = agm_gps_status.latitude_lo;
               recordHeader[6] = agm_gps_status.latitude_direction;
               recordHeader[7] = agm_gps_status.longitude_hi;
               recordHeader[8] = agm_gps_status.longitude_lo;
               recordHeader[9] = agm_gps_status.longitude_direction;
               recordHeader[10] = recordDate.Date;//agm_gps_status.utc_date_day;
               recordHeader[11] = recordDate.Month;//agm_gps_status.utc_date_month;
               recordHeader[12] = recordDate.Year;//agm_gps_status.utc_date_year;
               recordHeader[13] = recordTime.Hours;//agm_gps_status.utc_time_hh;
               recordHeader[14] = recordTime.Minutes;//agm_gps_status.utc_time_mm;
               recordHeader[15] = recordTime.Seconds;//agm_gps_status.utc_time_ss;
               recordHeader[16] = (uint8_t)(agm_gps_status.utc_time_sss>>8);
               
               fram_write_buf(recordHeader, 17);//write header at start of record
               /*
               for(uint8_t fram_i = 0; fram_i <29;fram_i++){
                    fram_write_data(temp_buf[buf_tail++]);
                    if(buf_tail >= 30) buf_tail = 0;
                    
               }
               */
               
               //if(_fram_address_cnt <= (262144-WRITE_READ_ADDR))_fram_address_cnt++;
              record_start = 0;
             }
             
             
             /*
             if((record_start == 0)&&(write_from_buf_cnt<30)){
               /////////////////////////////buzzer_alarm = 1;//fix buzzer long record interrupt
               if(write_from_buf_cnt != 0){
                 for(uint8_t fram_i = 0; fram_i <write_from_buf_cnt;fram_i++){
                      fram_write_data(temp_buf[buf_tail++]);
                      if(buf_tail >= 30) buf_tail = 0;
                 }               
               }
               fram_write_data(data_input);
               write_from_buf_cnt = 0;
             }*/
             
             if(record_start == 0){
               fram_write_data(data_input);  
               
             }             
          }
          else {
            if(record_prestate == 1){
              /*
              for(uint8_t fram_i = 0; fram_i < 29;fram_i++){
                   fram_write_data(temp_buf[buf_tail++]);
                   if(buf_tail >= 30) buf_tail = 0;
                   write_from_buf_cnt = 0;
                   //write_from_buf_cnt--;
              }   */           
              fram_write_settings((uint16_t)(_fram_address_cnt>>16), 6);
              fram_write_settings((uint16_t)(_fram_address_cnt&0xffff), 7);
              fram_write_settings(record_number, 8);
              if((record_length_enough == 0)&&(record_length_enough_cnt != 0)){
                record_number -= 1;
                record_length_enough_cnt = 0;
                fram_write_settings(record_number, 8);
                _fram_address_cnt = temp_fram_address_cnt;
                fram_write_settings((uint16_t)(_fram_address_cnt>>16), 6);
                fram_write_settings((uint16_t)(_fram_address_cnt&0xffff), 7);                
              }
            }
             //need shift tail for except colisions
             temp_tail_sleep++;
             if(temp_tail_sleep > buf_len)buf_tail++;
          } 
          record_prestate = record_state;
        //}buflen

        }//covar cnt > 11	
}


    
